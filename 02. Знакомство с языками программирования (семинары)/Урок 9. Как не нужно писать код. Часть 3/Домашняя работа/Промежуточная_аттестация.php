<?php

// Задача 64: Задайте значения M и N. Напишите программу, которая выведет все натуральные числа в промежутке от M до N.
// M = 1; N = 5. -> ""1, 2, 3, 4, 5""
// M = 4; N = 8. -> ""4, 6, 7, 8""

$m = 1;
$n = 5;

for ($i = $m; $i <= $n; $i++) {
    echo $i . ", ";
}



$M = 3;
$N = 15;

for ($i = $M; $i <= $N; $i++) {
    echo $i . " "; // 3 4 5 6 7 8 9 10 11 12 13 14 15
}

$M = 2;
$N = 24;

while ($M <= $N) {
    echo $M . " "; // 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
    $M++;
}


// Задача 66: Задайте значения M и N. Напишите программу, которая найдёт сумму натуральных элементов в промежутке от M до N.
// M = 1; N = 15 -> 120
// M = 4; N = 8. -> 30

$M = 1;
$N = 15;
$sum = 0;

for ($i = $M; $i <= $N; $i++) {
    $sum += $i;
}

echo $sum; // 120

$M = 4;
$N = 8;
$sum = 0;
$i = $M;

while ($i <= $N) {
    $sum += $i;
    $i++;
}

echo $sum; // 30

$M = 5;
$N = 30;

$arr = range($M, $N);
$sum = array_sum($arr);

echo $sum; // 475


// Задача 68: Напишите программу вычисления функции Аккермана с помощью рекурсии. Даны два неотрицательных числа m и n.
// m = 2, n = 3 -> A(m,n) = 9

// определение функции Аккермана
function ack($m, $n)
{
    // итеративный подход для вычисления значения функции
    while ($m > 0) {
        // базовый случай: при $n = 0 возвращаем 1
        if ($n == 0) {
            $n = 1;
        } else {
            // рекурсивный вызов функции для следующей итерации
            $n = ack($m, $n - 1);
        }
        // уменьшаем значение $m на 1 для следующей итерации
        $m -= 1;
    }
    // возвращаем результат вычислений
    return $n + 1;
}

// задание начальных значений аргументов
$m = 2;
$n = 3;

// вычисление значения функции и вывод результата на экран
$result = ack($m, $n);
echo "A($m, $n) = $result"; // A(2, 3) = 9
